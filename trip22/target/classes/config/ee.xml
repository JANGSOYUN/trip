<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
"http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="rooms">
	<insert id="insertRooms" parameterType="rooms">
		INSERT INTO rooms(hostId, details, avail_adults, avail_children, avail_infants, avail_bedroom, avail_bed, avail_bathroom,
		amenities, time_checkin, time_checkout, price_weekdays, price_weekend, address, disabled) 
		VALUES (#{hostId}, #{details}, #{avail_adults}, #{avail_children}, #{avail_infants}, #{avail_bedroom}, #{avail_bed}, #{avail_bathroom},
		#{amenities}, #{time_checkin}, #{time_checkout}, #{price_weekdays}, #{price_weekend}, #{address}, #{disabled})
	</insert>

	<select id="selectRoomsList" parameterType="HashMap" resultType="rooms">
		SELECT * FROM rooms
		<where>
			<if test="rv.roomsId != 0">	<!-- rv = RoomsVO -->
				roomsId = #{rv.roomsId}
			</if>
			<if test="rv.hostId != null">
				AND hostId like #{rv.hostId}
			</if>
			<if test="rv.details != null">
				AND details like #{rv.details}
			</if>
			<if test="rv.avail_adults != 0">
				AND avail_adults >= #{rv.avail_adults}
			</if>
			<if test="rv.avail_children != 0">
				AND avail_children >= #{rv.avail_children}
			</if>
			<if test="rv.avail_infants != 0">
				AND avail_infants >= #{rv.avail_infants}
			</if>
			<if test="rv.avail_bedroom != 0">
				AND avail_bedroom >= #{rv.avail_bedroom}
			</if>
			<if test="rv.avail_bed != 0">
				AND avail_bed >= #{rv.avail_bed}
			</if>
			<if test="rv.avail_bathroom != 0">
				AND avail_bathroom >= #{rv.avail_bathroom}
			</if>
			<if test="rv.amenities != null">
				AND amenities like #{rv.amenities}
			</if>
			<if test="rv.time_checkin != null">
				AND time_checkin like #{rv.time_checkin}
			</if>
			<if test="rv.time_checkout != null">
				AND time_checkout like #{rv.time_checkout}
			</if>
			<if test="rv.price_weekend != 0">
				AND price_weekdays <![CDATA[<=]]> #{rv.price_weekend}
				AND price_weekdays >= #{rv.price_weekdays}
				AND price_weekend <![CDATA[<=]]> #{rv.price_weekend}
				AND price_weekend >= #{rv.price_weekdays}
			</if>
			<if test="rv.address != null">
				AND address like CONCAT('%', #{rv.address},'%')
			</if>
			<if test="rv.disabled == 0">
				AND disabled = 0
			</if>
			<if test="rv.disabled != 0">
				AND disabled = {rv.disabled}
			</if>
			<if test="checkIn != null || checkOut != null">
				AND rooms.roomsId NOT IN (SELECT distinct roomsId FROM reservation
				WHERE (#{checkIn} <![CDATA[<=]]> checkIn 
				and checkIn <![CDATA[<]]> #{checkOut}) 
				OR (#{checkIn} <![CDATA[<]]> checkOut and checkOut <![CDATA[<=]]> #{checkOut}))
			</if>
		</where>
		ORDER BY roomsId desc
		<if test="paging != null">
			LIMIT #{paging.offset}, #{paging.dataPerPage}
		</if>
	</select>

	<!-- 페이징 처리를 위한 검색 카운트 -->
	<select id="selectRoomsListCount" parameterType="HashMap" resultType="Integer">
		SELECT COUNT(*) FROM rooms
		<where>
			<if test="rv.roomsId != 0">
				roomsId = #{rv.roomsId}
			</if>
			<if test="rv.hostId != null">
				AND hostId like #{rv.hostId}
			</if>
			<if test="rv.details != null">
				AND details like #{rv.details}
			</if>
			<if test="rv.avail_adults != 0">
				AND avail_adults >= #{rv.avail_adults}
			</if>
			<if test="rv.avail_children != 0">
				AND avail_children >= #{rv.avail_children}
			</if>
			<if test="rv.avail_infants != 0">
				AND avail_infants >= #{rv.avail_infants}
			</if>
			<if test="rv.avail_bedroom != 0">
				AND avail_bedroom >= #{rv.avail_bedroom}
			</if>
			<if test="rv.avail_bed != 0">
				AND avail_bed >= #{rv.avail_bed}
			</if>
			<if test="rv.avail_bathroom != 0">
				AND avail_bathroom >= #{rv.avail_bathroom}
			</if>
			<if test="rv.amenities != null">
				AND amenities like #{rv.amenities}
			</if>
			<if test="rv.time_checkin != null">
				AND time_checkin like #{rv.time_checkin}
			</if>
			<if test="rv.time_checkout != null">
				AND time_checkout like #{rv.time_checkout}
			</if>
			<if test="rv.price_weekend != 0">
				AND price_weekdays <![CDATA[<=]]> #{rv.price_weekend}
				AND price_weekdays >= #{rv.price_weekdays}
				AND price_weekend <![CDATA[<=]]> #{rv.price_weekend}
				AND price_weekend >= #{rv.price_weekdays}
			</if>
			<if test="rv.address != null">
				AND address like CONCAT('%', #{rv.address},'%')
			</if>
			<if test="rv.disabled == 0">
				AND disabled = 0
			</if>
			<if test="rv.disabled != 0">
				AND disabled = {rv.disabled}
			</if>
			<if test="checkIn != null || checkOut != null">
				AND rooms.roomsId NOT IN (SELECT distinct roomsId FROM reservation
				WHERE (#{checkIn} <![CDATA[<=]]> checkIn 
				and checkIn <![CDATA[<]]> #{checkOut}) 
				OR (#{checkIn} <![CDATA[<]]> checkOut 
				and checkOut <![CDATA[<=]]> #{checkOut}))
			</if>
		</where>
		ORDER BY roomsId desc
	</select>

	<select id="selectMinPrice" resultType="Integer">
		SELECT MIN(price_weekdays) FROM rooms
	</select>

	<select id="selectMaxPrice" resultType="Integer">
		SELECT MAX(price_weekend) FROM rooms
	</select>

	<!-- 페이징 처리를 위한 테이블 카운트 -->
	<select id="totalCount" parameterType="String" resultType="Integer">
		SELECT COUNT(*) FROM ${value}
	</select>

	<update id="updateRooms" parameterType="rooms">
		UPDATE rooms SET hostId = #{hostId}, details = #{details}, avail_adults = #{avail_adults}, avail_children = #{avail_children},
		avail_infants = #{avail_infants}, avail_bedroom = #{avail_bedroom}, avail_bed = #{avail_bed}, avail_bathroom = #{avail_bathroom},
		amenities = #{amenities}, time_checkin = #{time_checkin}, time_checkout = #{time_checkout}, price_weekdays = #{price_weekdays},
		price_weekend = #{price_weekend}, address = #{address}, disabled = #{disabled}
		WHERE roomsId = #{roomsId}
	</update>

	<delete id="deleteRooms" parameterType="rooms">
		DELETE FROM rooms WHERE roomsId = #{roomsId}
	</delete>

	<!-- 편의시설 부분 -->
	<select id="selectAmenities" parameterType="amenities" resultType="amenities">
		SELECT * FROM amenities_ref
		<where>
			<if test="amenities_idx != 0">
				amenities_idx = #{amenities_idx}
			</if>
			<if test="amenities_details != null">
				AND amenities_details like #{amenities_details}
			</if>
		</where>
		ORDER BY amenities_idx ASC
	</select>

	<!-- 리뷰 부분 -->
	<select id="selectRoomsReview" parameterType="HashMap" resultType="roomsreview">
		SELECT * FROM review rv INNER JOIN reservation rs ON rv.reservationNum = rs.reservationNum
		INNER JOIN person u ON rs.userId = u.userId WHERE rs.roomsId = #{roomsId}
		ORDER BY reviewDate DESC
		<if test="paging != null">
			LIMIT #{paging.offset}, #{paging.dataPerPage}
		</if>
	</select>

	<!-- 리뷰 부분 -->
	<select id="selectRoomsReviewSummary" resultType="roomsreviewsummary">
		SELECT roomsId, count(*) reviewCount, avg(scope) avgScope FROM review rv
		INNER JOIN reservation rs ON rv.reservationNum = rs.reservationNum
		GROUP BY roomsId
	</select>

	<!-- 리뷰 부분 각 숙소에 대한 리뷰 수 count -->
	<select id="selectRoomsReviewCount" parameterType="Integer" resultType="Integer">
		SELECT count(*) reviewCount FROM review rv
		INNER JOIN reservation rs ON rv.reservationNum = rs.reservationNum
		WHERE roomsId = #{roomsId}
	</select>

	<select id="selectRoomsHost" parameterType="person" resultType="person">
		SELECT * FROM person
		<where>
			<if test="userId != null">
				AND userId = #{userId}
			</if>
		</where>
	</select>

	<insert id="insertRoomsPhoto" parameterType="roomsimg">
		INSERT INTO roomsimg (roomsId, filedata) VALUES (#{roomsId}, #{filedata})
	</insert>

	<update id="updateRoomsPhoto" parameterType="roomsimg">
		UPDATE roomsimg SET filedata = #{filedata} WHERE roomsId = #{roomsId}
	</update>

	<select id="selectRoomsPhoto" parameterType="roomsimg" resultType="roomsimg">
		SELECT * FROM roomsimg WHERE roomsId = #{roomsId} 
	</select>

	<delete id="deleteRoomsPhoto" parameterType="roomsimg">
		DELETE FROM roomsimg WHERE roomsId = #{roomsId}
	</delete>

	<select id="selectRandomRoom" resultType="rooms">
		SELECT * FROM rooms where disabled = 0 order by rand() LIMIT 0, 1
	</select>
</mapper>